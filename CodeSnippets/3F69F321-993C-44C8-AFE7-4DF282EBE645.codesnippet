<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>cvclass</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>final class &lt;#classname#&gt;ViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
	
	@IBOutlet private weak var cv&lt;#varname#&gt;: UICollectionView?
	
	//-----------------------------------------------------------------------
	//  MARK: - UIViewController
	//-----------------------------------------------------------------------
	
	override func viewDidLoad() {
		super.viewDidLoad()
		
		configUI()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
	}
	
	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
		
		loadUI()
	}
	
	override func viewWillDisappear(_ animated: Bool) {
		super.viewWillDisappear(animated)
		
	}
	
	override func viewDidDisappear(_ animated: Bool) {
		super.viewDidDisappear(animated)
		
	}
	
	//-----------------------------------------------------------------------
	//  MARK: - UICollectionView Delegate / Datasource
	//-----------------------------------------------------------------------
	
	func numberOfSections(in collectionView: UICollectionView) -&gt; Int {
		return 0
	}
	
	func collectionView(_ collectionView: UICollectionView, 
                        numberOfItemsInSection section: Int) -&gt; Int {
		return 0
	}
	
	func collectionView(_ collectionView: UICollectionView, 
                        cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {
		
		let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath) as! &lt;#cellname#&gt;Cell

        cell.loadUI(params: &lt;#params#&gt;)
		
		return cell
	}
	
	func collectionView(_ collectionView: UICollectionView, 
                        didSelectItemAt indexPath: IndexPath) {
		
	}
	
	//-----------------------------
	//  Flow layout
	//-----------------------------
	
	func collectionView(_ collectionView: UICollectionView, 
                        layout collectionViewLayout: UICollectionViewLayout, 
                        sizeForItemAt indexPath: IndexPath) -&gt; CGSize {
		return .zero
	}
	
	func collectionView(_ collectionView: UICollectionView, 
                        layout collectionViewLayout: UICollectionViewLayout, 
                        minimumLineSpacingForSectionAt section: Int) -&gt; CGFloat {
		return 1
	}
	
	func collectionView(_ collectionView: UICollectionView, 
                        layout collectionViewLayout: UICollectionViewLayout, 
                        minimumInteritemSpacingForSectionAt section: Int) -&gt; CGFloat {
		return 1
	}
	
	//-----------------------------------------------------------------------
	//  MARK: - Custom methods
	//-----------------------------------------------------------------------
	
	func configUI() {
		
	}
	
	func loadUI() {
		
	}
}

final class &lt;#cellname#&gt;Cell: UICollectionViewCell {
	
	@IBOutlet private weak var lbl&lt;#varname#&gt;: UILabel?
	@IBOutlet private weak var img&lt;#varname#&gt;: UIImageView?
	
	func loadUI(params: Any) {
		// set UI values here
	}
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>3F69F321-993C-44C8-AFE7-4DF282EBE645</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>Swift</string>
	<key>IDECodeSnippetTitle</key>
	<string>UIViewController - UICollectionView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
